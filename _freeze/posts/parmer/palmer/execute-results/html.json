{
  "hash": "f0e08a35ec19e04298f7bb92f8b5fc90",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"palmer.qmd\"\nformat: html\njupyter: python3\nauthor: \"신태선,신인철,신지원\"\n---\n\n\n# Palmerpenguins Data Analysis\n\n## 문제 : 각 펭귄 종별 특징 알아내기.\n\n-   데이터 불러오기\n\n::: {#73e0bcdb .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\npenguins.info()\ndf=penguins # 편의상 df 변수 사용.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB\n```\n:::\n:::\n\n\n-   데이터 분석을 위해 `df` 에 어떤 데이터가 있는지 확인한다.\n\n::: {#ffebfa6c .cell execution_count=2}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>339</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>55.8</td>\n      <td>19.8</td>\n      <td>207.0</td>\n      <td>4000.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>340</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>43.5</td>\n      <td>18.1</td>\n      <td>202.0</td>\n      <td>3400.0</td>\n      <td>female</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>341</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>49.6</td>\n      <td>18.2</td>\n      <td>193.0</td>\n      <td>3775.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>342</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.8</td>\n      <td>19.0</td>\n      <td>210.0</td>\n      <td>4100.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>343</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.2</td>\n      <td>18.7</td>\n      <td>198.0</td>\n      <td>3775.0</td>\n      <td>female</td>\n      <td>2009</td>\n    </tr>\n  </tbody>\n</table>\n<p>344 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n-   종과 colomm에 따른 데이터 분류\n\n1.  각 종별 서식지 분포\n2.  각 종별 테어난 연도 분포\n3.  각 종별 부리의 길이\n4.  각 종별 성별\n5.  각 종별 지느러미\n6.  각 종별 무게\n\n*담당 자: 신태선*\n\n-   종의 종류와 개수를 파악한다.\n\n::: {#ce4bbab3 .cell execution_count=3}\n``` {.python .cell-code}\n# 종의 종류\nunique_species = df['species'].unique()\nprint(f\"Species의 종류: {unique_species}\")\n# 종의 개수 \nnum_species = df['species'].nunique()\nprint(f\"Species의 종류 개수: {num_species}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpecies의 종류: ['Adelie' 'Gentoo' 'Chinstrap']\nSpecies의 종류 개수: 3\n```\n:::\n:::\n\n\n-   총 3개의 종의 Data Fram을 나누어 저장한다.\n\n::: {#2e2228bd .cell execution_count=4}\n``` {.python .cell-code}\nadelie = df[df['species']== 'Adelie']\nchinstrap = df[df['species']== 'Chinstrap']\ngentoo = df[df['species']== 'Gentoo']\n```\n:::\n\n\n-   각 종별 서식지 분포\n\n::: {#2f074c17 .cell execution_count=5}\n``` {.python .cell-code}\nadelie_island_counts = adelie['island'].value_counts()\nadelie_island_counts.name = 'Adelie_island'\n\nchinstrap_island_counts = chinstrap['island'].value_counts()\nchinstrap_island_counts.name = 'Chinstrap_island'\n\ngentoo_island_counts = gentoo['island'].value_counts()\ngentoo_island_counts.name = 'Gentoo_island'\n\n# 병합\npenguins_island_df = pd.concat([adelie_island_counts, chinstrap_island_counts, gentoo_island_counts], axis=1).fillna(0)\npenguins_island_df\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Adelie_island</th>\n      <th>Chinstrap_island</th>\n      <th>Gentoo_island</th>\n    </tr>\n    <tr>\n      <th>island</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Dream</th>\n      <td>56</td>\n      <td>68.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Torgersen</th>\n      <td>52</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Biscoe</th>\n      <td>44</td>\n      <td>0.0</td>\n      <td>124.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n-   Adelie는 152마리 중 Dream에 56 마리, Torgersen에 52마리, Biscoe에 44마리 서식중이다.\n\n-   Chinstrap은 68마리 중 Dream에서만 68마리 서식중이다.\n\n-   Gentoo는 124마리 중 Biscoe 지역에서만 124마리 서식중이다.\n\n> 추론\n>\n> Adelie 펭귄은 **가장 넓은 환경에서 생존이 가능**하므로, 다양한 환경 변화에도 적응할 가능성이 높다.\n\n-   각 종별 태어난 연도 분포\n\n::: {#108e9789 .cell execution_count=6}\n``` {.python .cell-code}\nadelie_year_counts = adelie['year'].value_counts()\nadelie_year_counts.name = 'Adelie_year'\n\ngentoo_year_counts = gentoo['year'].value_counts()\ngentoo_year_counts.name = 'Gentoo_year'\n\nchinstrap_year_counts = chinstrap['year'].value_counts()\nchinstrap_year_counts.name = 'Chinstrap_year'\n\npenguins_year_df = pd.concat([adelie_year_counts, gentoo_year_counts, chinstrap_year_counts], axis=1)\npenguins_year_df\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Adelie_year</th>\n      <th>Gentoo_year</th>\n      <th>Chinstrap_year</th>\n    </tr>\n    <tr>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2009</th>\n      <td>52</td>\n      <td>44</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>50</td>\n      <td>34</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>50</td>\n      <td>46</td>\n      <td>18</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n> 추론\n>\n> 2007\\~2009년 사이에\n>\n> Adelie는 출생 개체 수가 비슷하다. 환경적 요인의 변화가 적었던것 같다.\n>\n> Gentoo는 2007년 출생 개체 수가 가장 낮고, 다른 년도와 비교했을때 차이가 10이상으로 크다. 2007년 출생을 결정하는 환경적 요인 변화가 컸을 가능성이 있다.\n>\n> Chinstrap은 2008년 출생 개체 수가 가장 낮고, 다른 년도와 비교했을 때 차이가 크다. 2008년 출생을 결정하는 환경적인 요인 변화가 컸을 가능성이 있다.\n\n# 신인철\n\n![gentoo 펭귄](https://search.pstatic.net/sunny/?src=https%3A%2F%2Fi.namu.wiki%2Fi%2FdrTsfbfFLZ9svOAHZ0f5jXdiGvU6ap6hzdXqwon9NfcGIb-DpS68i91AMNdeZlMQGrkT2e1BJ3YMkOil4ArYuQ.webp&type=sc960_832)\n\n![Chinstrap 펭귄](https://search.pstatic.net/sunny/?src=https%3A%2F%2Fi3.ruliweb.com%2Fimg%2F20%2F01%2F22%2F16fcc4abb051bbf06.jpg&type=sc960_832)\n\n![adelie 펭귄](https://search.pstatic.net/sunny/?src=https%3A%2F%2Fi.namu.wiki%2Fi%2Fyy9GM91w2J3gcWKiD0AxwmIWWX7lhu9LmF3KGk13rNBu1BTz72Bdu3qu62cf9Xc5sfYzT9G8c3f-8X3eDgGDZA.webp&type=sc960_832)\n\n## 각 종별 부리의 길이\n\n## 각 종별 성별\n\n## bill length = 부리의길이 bill depth = 부리 깊이\n\n## 펭귄 성별에 따라 개체수 구하기\n\n::: {#3aac0a79 .cell execution_count=7}\n``` {.python .cell-code}\nnan_penguins = penguins['sex'].isna().sum()\nfemale_adelie = penguins.loc[(penguins['species'] == 'Adelie') & (penguins['sex']==\"female\")].shape[0]\nmale_adelie = penguins.loc[(penguins['species'] == 'Adelie') & (penguins['sex']==\"male\")].shape[0]\nfemale_gentoo = penguins.loc[(penguins['species'] == 'Gentoo') & (penguins['sex']==\"female\")].shape[0]\nmale_gentoo = penguins.loc[(penguins['species'] == 'Gentoo') & (penguins['sex']==\"male\")].shape[0]\nfemale_chinstrap = penguins.loc[(penguins['species'] == 'Chinstrap') & (penguins['sex']==\"female\")].shape[0]\nmale_chinstrap = penguins.loc[(penguins['species'] == 'Chinstrap') & (penguins['sex']==\"male\")].shape[0]\n```\n:::\n\n\n## 개체수 print함수 이용하여 정리하기\n\n::: {#cc544a9c .cell execution_count=8}\n``` {.python .cell-code}\n#각 종의 암컷, 수컷의 개체수\nprint(\"Adelie 암컷의 수 : \",female_adelie,'Adelie 수컷의 수 : ',male_adelie, 'Gentoo 암컷의 수 : ',female_gentoo,\n      'Gentoo 수컷의 수 : ', male_gentoo, 'Chinstrap 암컷의 수 :', female_chinstrap, 'Chinstrap 수컷의 수 : ' ,male_chinstrap\n      ,'구별불가 펭귄의 수 : ', nan_penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdelie 암컷의 수 :  73 Adelie 수컷의 수 :  73 Gentoo 암컷의 수 :  58 Gentoo 수컷의 수 :  61 Chinstrap 암컷의 수 : 34 Chinstrap 수컷의 수 :  34 구별불가 펭귄의 수 :  11\n```\n:::\n:::\n\n\n### 결론 : Adelie, gentoo, chinstrap순으로 펭귄 숫자가 많았고 모든펭귄에서 동등한 성비를 가졌다.\n\n## 종별 부리 깊이 구분짓기\n\n::: {#ae7d821c .cell execution_count=9}\n``` {.python .cell-code}\n#종별 구분짓기 A는 아델리\nadelie = penguins.loc[(penguins['species'] == 'Adelie'),['bill_depth_mm']]\ngentoo = penguins.loc[(penguins['species'] == 'Gentoo'),['bill_depth_mm']]\nchinstrap = penguins.loc[(penguins['species'] == 'Chinstrap'),['bill_depth_mm']]\nadelie_d =  adelie.describe()\ngentoo_d = gentoo.describe()\nchinstrap_d = chinstrap.describe()\n```\n:::\n\n\n## .describe()이용하여 부리깊이 구하기\n\n::: {#7563be29 .cell execution_count=10}\n``` {.python .cell-code}\nadelie_d.index = ['표본개수', '평균','표준편차','최솟값','25%','50%','75%','최대값']\ngentoo_d.index = ['표본개수', '평균','표준편차','최솟값','25%','50%','75%','최대값']\nchinstrap_d.index = ['표본개수', '평균','표준편차','최솟값','25%','50%','75%','최대값']\n```\n:::\n\n\n::: {#72d718b2 .cell execution_count=11}\n``` {.python .cell-code}\nadelie_d.rename(columns={'bill_depth_mm': '부리깊이'})\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>부리깊이</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>표본개수</th>\n      <td>151.000000</td>\n    </tr>\n    <tr>\n      <th>평균</th>\n      <td>18.346358</td>\n    </tr>\n    <tr>\n      <th>표준편차</th>\n      <td>1.216650</td>\n    </tr>\n    <tr>\n      <th>최솟값</th>\n      <td>15.500000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>17.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>18.400000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>19.000000</td>\n    </tr>\n    <tr>\n      <th>최대값</th>\n      <td>21.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#070a2332 .cell execution_count=12}\n``` {.python .cell-code}\ngentoo_d.rename(columns={'bill_depth_mm': '부리깊이'})\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>부리깊이</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>표본개수</th>\n      <td>123.000000</td>\n    </tr>\n    <tr>\n      <th>평균</th>\n      <td>14.982114</td>\n    </tr>\n    <tr>\n      <th>표준편차</th>\n      <td>0.981220</td>\n    </tr>\n    <tr>\n      <th>최솟값</th>\n      <td>13.100000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>14.200000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>15.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>15.700000</td>\n    </tr>\n    <tr>\n      <th>최대값</th>\n      <td>17.300000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#16c3625d .cell execution_count=13}\n``` {.python .cell-code}\nchinstrap_d.rename(columns={'bill_depth_mm': '부리깊이'})\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>부리깊이</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>표본개수</th>\n      <td>68.000000</td>\n    </tr>\n    <tr>\n      <th>평균</th>\n      <td>18.420588</td>\n    </tr>\n    <tr>\n      <th>표준편차</th>\n      <td>1.135395</td>\n    </tr>\n    <tr>\n      <th>최솟값</th>\n      <td>16.400000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>17.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>18.450000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>19.400000</td>\n    </tr>\n    <tr>\n      <th>최대값</th>\n      <td>20.800000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 결론 : chinstrap 펭귄이 평균 18.42mm으로 가장 깊은 부리를 가졌고 gentoo 펭귄이 14.98mm로 가장 얕은 부리를 가졌다\n\n## \n\n# Penguin data 분석 설명 - 6조\n\n::: {#8305dcde .cell execution_count=14}\n``` {.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\npenguins.info()\ndf=penguins\ndf\n\n# 종별로 데이터를 나눔!\ngentoo = penguins[penguins['species'] == \"Gentoo\"] # 124개의 데이터\nchinstrap = penguins[penguins['species'] == \"Chinstrap\"]  # 68개의 데이터\nadelie = penguins[penguins['species'] == \"Adelie\"]  # 152개 데이터\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB\n```\n:::\n:::\n\n\n## 각 종별 지느러미 분석\n\n::: {#f56bcdf8 .cell execution_count=15}\n``` {.python .cell-code}\n# flipper_length_mm\n\n# 'flipper_length_mm' 컬럼에 대한 describe() 결과\ng_flipper_desc = gentoo['flipper_length_mm'].describe()\na_flipper_desc = adelie['flipper_length_mm'].describe()\nc_flipper_desc = chinstrap['flipper_length_mm'].describe()\n\n# 평균, 최대값, 최소값 추출\nmean_val = g_flipper_desc['mean']\nmax_val = g_flipper_desc['max']\nmin_val = g_flipper_desc['min']\n\nmean_val_a = a_flipper_desc['mean']\nmax_val_a = a_flipper_desc['max']\nmin_val_a = a_flipper_desc['min']\n\nmean_val_c = c_flipper_desc['mean']\nmax_val_c = c_flipper_desc['max']\nmin_val_c = c_flipper_desc['min']\n\n# gentoo\nprint(f\"Gentoo의 flipper_length의 평균: {mean_val}, 최대값: {max_val}, 최소값: {min_val}\")\n\n# adelie\nprint(f\"Adelie의 flipper_length의 평균: {mean_val_a}, 최대값: {max_val_a}, 최소값: {min_val_a}\")\n\n# chinstrap\nprint(f\"Chinstrap의 flipper_length의 평균: {mean_val_c}, 최대값: {max_val_c}, 최소값: {min_val_c}\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGentoo의 flipper_length의 평균: 217.1869918699187, 최대값: 231.0, 최소값: 203.0\nAdelie의 flipper_length의 평균: 189.95364238410596, 최대값: 210.0, 최소값: 172.0\nChinstrap의 flipper_length의 평균: 195.8235294117647, 최대값: 212.0, 최소값: 178.0\n```\n:::\n:::\n\n\n|                    | Gentoo  | Adelie  | Chinstrap |\n|--------------------|---------|---------|-----------|\n| 평균 지느러미 길이 | 217.187 | 189.954 | 195.824   |\n| 최대 지느러미 길이 | 231     | 210     | 212       |\n| 최소 지느러미 길이 | 203     | 172     | 178       |\n\n### 지느러미 분석 결과\n\n-   평균적으로 보았을때, Gentoo가 보통 가장 긴 지느러미 길이를 가지고 있다.\n\n-   최대 지느러미 길이 역시 Gentoo가 가지고 있다.\n\n-   가장 짧은 지느러미 길이를 가지고 있는 종은 Adelie이다.\n\n## 각 종별 몸무게 분석\n\n::: {#c0ac6ddc .cell execution_count=16}\n``` {.python .cell-code}\n# body_mass_g\ng_body_desc = gentoo['body_mass_g'].describe()\na_body_desc = adelie['body_mass_g'].describe()\nc_body_desc = chinstrap['body_mass_g'].describe()\n\n# 평균, 최대값, 최소값 추출\nmean_val = g_body_desc['mean']\nmax_val = g_body_desc['max']\nmin_val = g_body_desc['min']\n\nmean_val_a = a_body_desc['mean']\nmax_val_a = a_body_desc['max']\nmin_val_a = a_body_desc['min']\n\nmean_val_c = c_body_desc['mean']\nmax_val_c = c_body_desc['max']\nmin_val_c = c_body_desc['min']\n\n# gentoo\nprint(f\"Gentoo의 body_mass의 평균: {mean_val}, 최대값: {max_val}, 최소값: {min_val}\")\n\n# adelie\nprint(f\"Adelie의 body_mass의 평균: {mean_val_a}, 최대값: {max_val_a}, 최소값: {min_val_a}\")\n\n# chinstrap\nprint(f\"Chinstrap의 body_mass의 평균: {mean_val_c}, 최대값: {max_val_c}, 최소값: {min_val_c}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGentoo의 body_mass의 평균: 5076.016260162602, 최대값: 6300.0, 최소값: 3950.0\nAdelie의 body_mass의 평균: 3700.662251655629, 최대값: 4775.0, 최소값: 2850.0\nChinstrap의 body_mass의 평균: 3733.0882352941176, 최대값: 4800.0, 최소값: 2700.0\n```\n:::\n:::\n\n\n|             | Gentoo   | Adelie   | Chinstrap |\n|-------------|----------|----------|-----------|\n| 평균 몸무게 | 5076.016 | 3700.662 | 3733.088  |\n| 최대 몸무게 | 6300     | 4775     | 4800      |\n| 최소 몸무게 | 3950     | 2850     | 2700      |\n\n### 몸무게 분석 결과\n\n-   평균,최대,최소 몸무게를 다 비교해보았을때, 가장 무거운 무게를 가진 종은 Gentoo 종이다.\n\n-   Chinstrap 종이 가장 가벼운 몸무게를 가지고 있는 것을 알 수 있다.\n\n",
    "supporting": [
      "palmer_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}